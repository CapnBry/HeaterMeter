<%
  local rrd = luci.http.formvalue("rrd")
  require "lmclient"
-%>
<!doctype html public "-//W3C//DTD HTML 4.0//EN">
<html>
<head>
<link rel="icon" type="image/x-icon" href="<%=resource%>/favicon.ico">
<title>HeaterMeter BBQ Control</title>
<script language="javascript" src="<%=resource%>/js/jquery-all.js" type="text/javascript"></script>
<!--[if lte IE 8]><script language="javascript" type="text/javascript" src="<%=resource%>/js/excanvas.min.js"></script><![endif]-->
<script language="javascript" type="text/javascript">
var lastUpdateUtc;
var lastPlot;
var lastOverviewPlot;
var lastGraphHover = 0;
var lastLidOpen = -1;

// mapJson translates the json temps array index to graphData index
var mapJson = [6,5,4,3];
var graphLoaded = false;
var graphData =  [
        { label: "", color: "#6cf", lines: { show: true, lineWidth: 1, fill: true }, shadowSize: 0, yaxis: 2, data: [] },  //Controller Output
        { label: "", color: "#fd9", lines: { show: true, lineWidth: 1, fill: true }, shadowSize: 0, yaxis: 2, data: [] },  //lid
        { label: "Set", color: "rgba(255,0,0,0.8)", lines: { show: true, lineWidth: 1 }, shadowSize: 0, data: [] },
        { label: "Amb", color: "#789", lines: { show: true }, data: [] },
        { label: "Food2", color: "#297", lines: { show: true }, data: [] },
        { label: "Food1", color: "#6c3", lines: { show: true }, data: [] },
        { label: "Pit", color: "#e73", lines: { show: true, lineWidth: 3 }, data: [] },
        { label: "Fan", color: "#6cf", lines: { show: true, lineWidth: 3 }, shadowSize: 0, yaxis: 2, data: [] }  //Fan Speed
    ];

    var graphOpts = {
        legend: { show: false },
        canvas: false,
        series: {
            lines: { show: true, lineWidth: 2 },
            points: { show: false, symbol: "circle", radius: 1, fill: false },
            shadowSize: 4
        },
        xaxis: { show: true, mode: "time", timezone: "browser",
          font: { color: "#ccc" } },
        yaxis: { show: true, ticks: 10, font: { color: "#ccc" } },
        yaxes: [ { position: "right" }, { min: 0, max: 100 } ],
        grid: { clickable: true, hoverable: true, color: "#ccc",
          borderColor: "#545454" }
    };
    var graphOpts2 = {
        legend: { show: false },
        canvas: false,
        series: {
            lines: { show: true, lineWidth: 1 },
            points: { show: false },
            shadowSize: 0
        },
        xaxis: graphOpts.xaxis,
        yaxis: { show: false },
        yaxes: graphOpts.yaxes, 
        grid: { clickable: false, color: "#ccc", borderColor: "#545454" },
        selection: { mode: "x" }
    };

$(document).ready(function()
{
    loadPrefs();
    graphOpts.legend.container = $("#graph_legend");
    $("#graph_overview").bind("plotselected", overviewSelected);
    $("#graph_overview").bind("plotunselected", overviewUnselected);
    $("#showfan").click(showFanChanged);
    $("#graphtt").click(graphttClicked);
    $("#rangeselect").change(rangeSelectChanged);
    $("#graph").bind("plotclick", graphClicked);
    $("#graph").bind("plothover", graphHover);
    $("#graph").mouseout(function () { $("#graphtt").fadeOut(); });
    $("div.legfill").click(legendClicked);
    $("div.noisebtn").click(noisebtnClicked);
    $(document).keydown(keyPressed);

    // Set colors of probe readings to match the graph colors
    for (var srs=0; srs<4; ++srs)
        $("#temp" + srs).css("text-shadow", "2px 2px 1px " + graphData[mapJson[srs]].color);
    for (var srs=1; srs<4; ++srs)
        $("#pl" + srs).css("background", graphData[mapJson[srs]].color);

<% if context.authuser == "root" then %>
    $(".pname").editable(nameChanged, {maxlength: 13, select: true});
    $("#pn0").editable(nameChanged, {maxlength: 13, width: "13em", select: true});
    $("#set").editable(tempChanged, {style: "display: inline", select: true});
	//Soon as login as root showing the PidInt. I can't sent a keypress on phone or tablet
    $.get("<%=build_url("admin/lm/set")%>", {tp: 1});
    
    $("#lid").click(function () { 
        if (lastLidOpen == -1) return;
        $(this).html("Toggling...");
        var enable = (lastLidOpen == 0) ? ",,1" : ",,0";
        $.get("<%=build_url("admin/lm/set")%>", {ld: enable});
    });
    
    $("#alarmclear").click(function () {
        $(this).html("Silencing...");
        $.get("<%=build_url("admin/lm/set")%>", {al: "0,0,0,0,0,0,0,0"});
    }).show();
        
<% end %>
<% if not rrd then %>
    var o = <%= LmClient():query("$LMSU") or "{}" %>;
    var now = +new Date();
    if ((now - 10000) < (o.time * 1000))
        connectionSuccess(o);
<% end %>
    refreshGraphData();
});

$(window).load(function ()
{
<% if not rrd then %>
    if (!!window.EventSource) {
        var source = new EventSource("<%=build_url("lm/stream")%>");
        source.addEventListener("hmstatus", function(e) {
            var o = JSON.parse(e.data);
            connectionSuccess(o);
        });
        source.addEventListener("log", function (e) {
            if (e.data.substr(9, 6) == "NOISE ")
                graphNoise(e.data);
            else
                console.log(e.data);
        });
        source.addEventListener("alarm", function (e) {
            var o = JSON.parse(e.data);
            alarmEvent(o);
        });
        source.addEventListener("error", connectionFailure);
        source.addEventListener("pidint", function (e) {
            var o = JSON.parse(e.data);
            pidIntEvent(o);
        });
    } else {
        if (!lastUpdateUtc)
            JSONQuery();
        window.setInterval(JSONQuery, 10000);
    }
<% end %>
});

$(window).resize(function() {
    // erase the flot graph and then redraw
    $('#graph').text('');
    doPlot();
});
	
function storePref(k, v)
{
  if ("localStorage" in window && window["localStorage"] !== null)
    localStorage[k] = v;
}

function loadPrefs()
{
  if ("localStorage" in window && window["localStorage"] !== null)
  {
    $("#rangeselect").val(localStorage["prefs.graphrange"] || "");
    var graphlines = localStorage["pref.graphlines"] || "01234567";
    $("#showfan").prop("checked", graphlines.indexOf("0") != -1);
    for (i=0; i<graphData.length; ++i) {
      graphData[i].lines.show = graphlines.indexOf(i) != -1;
	  }
  }
}

function storePrefGraphlines()
{
  var graphlines = "";
  for (i=0; i<graphData.length; ++i)
    if (graphData[i].lines.show)
      graphlines += i;
  storePref("pref.graphlines", graphlines);
}

function rangeSelectChanged()
{
  storePref("prefs.graphrange", $("#rangeselect").val());
  refreshGraphData();
}

function alarmEvent(o)
{
  if (o.atype)
  {
    $("#dialog-overlay").show();
    $("#alarmclear").html("Silence");
    $("#alarm h2").text(o.pn);
    $("#alarm p").html('Alarm (' + o.atype + ') trigged at ' +
      o.c + '&deg; exceeds threshold ' + o.t + '&deg;');
    $("#alarm").show("fast");
  }
  else
  {
    $("#alarm").hide("fast");
    $("#dialog-overlay").hide();
  }
}

function keyPressed(e)
{
  if (this !== e.target && e.target.type == "text")
    return;
  switch (e.which)
  {
    case 80: // P
      togglePidInt();
      break;
  }
}

function togglePidInt()
{
  if ($("#pidint").is(":visible"))
    // Use a timeout on success to make sure the next (final) update
    // doesn't turn the display back on and leave it on
    $.get("<%=build_url("admin/lm/set")%>", {tp: 0},
      function () { $("#pidint").delay(1000).fadeOut('fast'); }
    );
  else
    $.get("<%=build_url("admin/lm/set")%>", {tp: 1});
}

function pidIntBar(target, val)
{
  val = (val > 100) ? 100 : (val < -100) ? -100 : val;
  if (val > 0)
    $(target).css({
      "left": "50%",
      "width": val/2 + "%",
      "background-color": "#74b931"});
  else
    $(target).css({
      "left": 50 + val/2 + "%",
      "width": -val/2 + "%",
      "background-color": "#ce3b46"});
}

function pidIntEvent(o)
{
  $("#pidint").show('fast');
  $("#pivb").html(o.b.toFixed(1) + "%"); pidIntBar("#pibb", o.b);
  $("#pivp").html(o.p.toFixed(1) + "%"); pidIntBar("#pibp", o.p);
  $("#pivi").html(o.i.toFixed(1) + "%"); pidIntBar("#pibi", o.i);
  $("#pivd").html(o.d.toFixed(1) + "%"); pidIntBar("#pibd", o.d);
  $("#pivdt").html(o.t.toFixed(2) + "&deg;");
}

function graphNoise(s)
{
  var FREQ = 16000000 / 128 / 13;
  var vals = s.substr(15, s.length - 18).split(' ');
  var sorted = vals.slice(0).sort(function(a,b) {return a - b;});
  var avg = 0;
  for (var i=0; i<vals.length; ++i)
  {
    vals[i] = [i * 1000 / FREQ, parseInt(vals[i])];
    avg += vals[i][1];
  }
  avg /= vals.length;
  var MAX = (vals.length - 1) * 1000 / FREQ;
  var median = sorted[Math.floor(sorted.length/2)];
  var marray = [[0,median], [MAX,median]];
  var aarray = [[0,avg], [MAX,avg]];
  $.plot("#noisegraph_g", [ vals,
      { label: "Median", data: marray },
      { label: "Average", data: aarray }
    ], { legend: { backgroundColor: "#333" },
      xaxis: { font: { color: "#ccc" }, ticks: 16 },
      yaxis: { font: { color: "#ccc" }},
      grid: { color: "#999" } }
  );
  $("#noisegraph").show();
}

function legendClicked()
{
    // The ID should be "pl?" so pull the json probe index off the end
    // and get the graphdata index
    var idx = mapJson[parseInt(this.id.substring(2))];
    graphData[idx].lines.show = !graphData[idx].lines.show;
    storePrefGraphlines();
    updateGraph();
}

function noisebtnClicked()
{
    var probe = $(this).text();
    $.get("<%=build_url("admin/lm/set")%>",
      {tp: "," + probe });
}

function refreshGraphData()
{
    var range = $("#rangeselect").val();

    $("#graphtt").fadeOut();
    $("#rangeselect").prop("disabled", true);
    $("#loadindic").show();
    if (lastOverviewPlot)
    {
      lastOverviewPlot.clearSelection(true);
      graphOpts.xaxis.min = null;
      graphOpts.xaxis.max = null;
    }
    graphLoaded = false;

    $.each(graphData, function() {
        this.data = [];
    });
    
    var params = {nancnt: range};
    <% if rrd then write("params.rrd = '"..rrd.."'; graphOpts.canvas = true;") end %>
    $.ajax({
        type: "GET",
        url: "<%=build_url("lm/hist")%>",
        data: params,
        dataType: "text",
        success: tstatSuccess,
        error: clearLoadingIndic
    });
}

function clearLoadingIndic()
{
    $("#loadindic").hide();
    $("#rangeselect").removeAttr("disabled");
}

function showFanChanged()
{
    if ($("#showfan").prop("checked"))
    {
        graphData[0].lines.show = true;
        graphData[1].lines.show = true;
		graphData[7].lines.show = true;
        storePrefGraphlines();
    }
    else
    {
        graphData[0].lines.show = false;
        graphData[1].lines.show = false;
		graphData[7].lines.show = false;
        storePrefGraphlines();
    }
    updateGraph();
}

function doPlot()
{
    lastPlot = $.plot($("#graph"), graphData, graphOpts);
    <% if rrd then write("saveAsPng(lastPlot);") end %>
}

function updateGraphRanges(from, to)
{
    $("#graphtt").fadeOut();
    graphOpts.xaxis.min = from;
    graphOpts.xaxis.max = to;
    doPlot();
}

function overviewSelected(event, ranges)
{
    updateGraphRanges(ranges.xaxis.from, ranges.xaxis.to);
}

function overviewUnselected()
{
    updateGraphRanges(null, null);
}

function formatTime(date, includeSeconds)
{
    if (includeSeconds)
        return $.plot.formatDate(date, "%l:%M:%S %P");
    else
        return $.plot.formatDate(date, "%l:%M %P");
}

function formatDate(date)
{
    return $.plot.formatDate(date, "%y %b %d, %l:%M %P");
}

function formatTimer(secs, includeSeconds)
{
    var hours = Math.floor(secs / 3600);
    secs -= hours * 3600;
    var mins = Math.floor(secs / 60);
    secs -= mins * 60;

    var retVal = "";
    if (hours > 0)
        retVal = hours + "h";
    if (mins > 0)
        retVal += mins + "m";
    if (includeSeconds && secs > 0)
        retVal += secs + "s";

    return retVal;
}

function lerp(n1, n2, frac)
{
    return (n1 * (1.0 - frac)) + (n2 * frac);
}

function graphHover(event, pos, item)
{
    var now = +new Date();
    if (now - lastGraphHover > 100)
    {
        graphClicked(event, pos, item); 
        lastGraphHover = now;
    }
}

function graphttClicked()
{
    // After clicking the tooltip to dismiss it, don't show again for 1s
    lastGraphHover = +new Date();
    lastGraphHover += 1000;
    $(this).fadeOut(); 
}

function graphClicked(event, pos, item)
{
    var sInfo = "";
    var srsClosestY = -1;
    var srsClosestYIdx;
    // Display on tooltip as Pit, Food1, Food2, Amb, Set, FanSpeed, PidOutput
    var SERIES_DISPLAY_ORDER = [ 6, 5, 4, 3, 2, 7, 0 ];
    for (var idx=0; idx<SERIES_DISPLAY_ORDER.length; ++idx)
    {
        var srs = SERIES_DISPLAY_ORDER[idx];
        var val = NaN;
        var firstPastIdx = -1;
        var srsData = graphData[srs].data;
        
        for (var i=0; i<srsData.length; ++i)
        {
            if (pos.x <= srsData[i][0]  && !isNaN(srsData[i][1]))
            {
                firstPastIdx = i;
                break;
            }
        }
        
        if (firstPastIdx == -1)
            continue;
                
        // This must either be the point at the same timestamp as where you 
        // clicked or you must click between two points.  If you click off to 
        // the left of the first point or to the right of the last, we don't 
        // use that value because you've clicked outside the range of valid data. 
        var ptR = srsData[firstPastIdx];
        if (item && item.datapoint[0] == ptR[0])
            val = ptR[1];
        else if (firstPastIdx != 0)
        {
            var ptL = srsData[firstPastIdx-1];
            var timeDiff = ptR[0] - ptL[0];
            val = lerp(ptL[1], ptR[1], (pos.x - ptL[0]) / timeDiff);
        }
            
        if (!isNaN(val))
            if (srs == 0)
            {
                if (val >= 0)
                    sInfo = sInfo + "PidOutput " + Math.round(val) + "%<br />";
            }
            if (srs == 7)
			{
			    if (val >= 0)
				    sInfo = sInfo + graphData[srs].label + " " + Math.round(val) + "%<br/>";
			}
            else 
            {
                sInfo = sInfo + graphData[srs].label + " " + val.toFixed(1) + "&deg;<br />";

                // Save the series with the closest Y point to where the mouse is 
                if (srsClosestY == -1 ||
                    Math.abs(srsData[firstPastIdx][1] - pos.y) < 
                    Math.abs(graphData[srsClosestY].data[srsClosestYIdx][1] - pos.y))
                {
                    srsClosestY = srs;
                    srsClosestYIdx = firstPastIdx;
                }
            }
                  
    }  /* for srs */
    
    if (sInfo == "")
        $("#graphtt").fadeOut();
    else
    {
        if (srsClosestY != -1)
        {
            var axisY = lastPlot.getYAxes()[0];
            var valY = graphData[srsClosestY].data[srsClosestYIdx][1];
            pos.pageY = axisY.p2c(valY) + 
                lastPlot.offset().top + lastPlot.getPlotOffset().top;
        }
        
        var d = new Date(pos.x);
        $("#graphtt_title").html(formatTime(d, false));
        $("#graphtt_content").html(sInfo);
        var ttWidth = $("#graphtt").outerWidth();
        var ttHeight = $("#graphtt").outerHeight();
        $("#graphtt_arrow").css({left: ttWidth/2 - 7, top: ttHeight - 1});
        $("#graphtt")
            .css({left: pos.pageX - (ttWidth/2) - 1, top: pos.pageY - ttHeight - 15})
            .show();
    }
}

function addGraphPoint(d, time, temp)
{
    // if the last two points have the same value as the
    // new point just update the time on the last point
    if (d.length > 1)
    {
        var p1 = d[d.length-2];
        var p2 = d[d.length-1];
        if (p1[1] == temp && p2[1] == temp)
        {
            p2[0] = time;
            return;
        }
    }
    // The RRD may start with a ton of NaN, don't put them into the graph
    // because otherwise it makes a blank space until the first real value
    else if (d.length == 0 && isNaN(temp))
        return;

    d.push([time, temp]);
}

function updateGraph()
{
    // we want to save the selected area, and if the selection is to the
    // end of the graph, extend it to include the new point
    var selectedArea;
    var extendSelection = false;

    if (lastOverviewPlot)
        selectedArea = lastOverviewPlot.getSelection();
    if (selectedArea && selectedArea.xaxis.to == lastOverviewPlot.getAxes().xaxis.max)
        extendSelection = true;
    if (selectedArea)
      lastOverviewPlot.clearSelection(false); 
      
    lastOverviewPlot = $.plot($("#graph_overview"), graphData, graphOpts2);
    
    if (extendSelection)
        selectedArea.xaxis.to = lastOverviewPlot.getAxes().xaxis.max;
    if (selectedArea)
        lastOverviewPlot.setSelection(selectedArea);
    else
        doPlot();
}

function addFanGraphPoint(time, value)
{
    if (isNaN(value))
        return;
        
    if (value < 0)
    {
        addGraphPoint(graphData[0].data, time, 0);
        addGraphPoint(graphData[1].data, time, 100);
    } 
    else 
    {
        addGraphPoint(graphData[0].data, time, value);
        addGraphPoint(graphData[1].data, time, -1);
    }
}

function tstatSuccess(csv)
{
    // mapCsv translates csv field index to graphData index
    // a graphData index of -1 means not to map it
    //var mapCsv = [-1,3,7,6,5,4,0,2];
    var mapCsv = [-1,2,6,5,4,3,0,7];
    
    clearLoadingIndic();
    $.each(csv.split('\n'), function (){
        if (this == "") return;
        var line = this.split(",");
        if (line.length != mapCsv.length) return;
        line[0] = line[0] * 1000;
        for (var valIdx=1; valIdx<line.length; ++valIdx)
        {
            var dest = mapCsv[valIdx];
            if (dest < 0)
                continue;
            var value = parseFloat(line[valIdx]);
            if (dest == 0)
                addFanGraphPoint(line[0], value);
            else    
                addGraphPoint(graphData[dest].data, line[0], value);
        }
    });
    graphLoaded = true;
    updateGraph();
}

function nameChanged(value, settings)
{
    var params = {}; params[this.id] = value;
    $.get("<%=build_url("admin/lm/set")%>", params);
    return value;
}

function tempChanged(value, settings)
{
    if (value.length > 0)
    {
        $.get("<%=build_url("admin/lm/set")%>", {sp: value});
        return value;
    }
    else return "err";
}

function JSONQuery()
{
    $.ajax({
        type: "GET",
        url: "<%=build_url("lm/hmstatus")%>",
        dataType: "json",
        timeout: 5000,
        success: connectionSuccess,
        error: connectionFailure
    });
}

/* find out how many points we have on the graph and
requery the server for an updated consolidation
if we have too much data */
function checkRefreshGraphOrUpdate()
{
    if (!graphLoaded)
        return;

    var max = 0;
    $.each(graphData, function () {
        if (this.data.length > max)
            max = this.data.length;
    });

    // the RRD holds up to 480 points and the graph holds
    // less due to point consolidation, so best case
    // scenario 24pts * 10sec per poll = 4mins
    if (max > 504)
        refreshGraphData()
    else
        updateGraph();
}

function updateLid(val)
{
    var lid = $("#lid");
    if (val == 0)
    {
        if (lastLidOpen != 0)
          lid.html("Lid Closed").css("color", "#bbb");
    }
    else
    {
        if (lastLidOpen < 1)
          lid.css("color", "#fc3");
        lid.html("Lid Open " + formatTimer(val, true));
    }
    lastLidOpen = val;
}

function connectionSuccess(o)
{
    var updateEditables = ($("form").length == 0);
    o.time *= 1000;
    lastUpdateUtc = o.time;
    if (updateEditables) $("#set").html(o.set);

    if (graphLoaded)
    {
        addFanGraphPoint(o.time, o.lid > 0 ? -o.lid : o.fan.c);
		addGraphPoint(graphData[2].data, o.time, o.set);
		addGraphPoint(graphData[7].data, o.time, o.fan.f);
    }

    for(var i = 0; i < 4; i++)
    {
        if (updateEditables) $("#pn" + i).text(o.temps[i].n);
        var val = o.temps[i].c;
        var tempElem = $("#temp" + i);
        if (val === null)
        {
            val = NaN;
            tempElem.text("off");
        }
        else
            tempElem.html(val.toFixed(1) + "&deg;");

        if (o.temps[i].a.r == 'H')
            tempElem.removeClass("alarmLow").addClass("alarmHigh");
        else if (o.temps[i].a.r == 'L')
            tempElem.removeClass("alarmHigh").addClass("alarmLow");
        else
            tempElem.removeClass("alarmLow alarmHigh");

        if (val && o.temps[i].dph && o.temps[i].dph >= 1.0)
        {
            var alarm_h = +o.temps[i].a.h;
            var timeRemain = ((alarm_h - val) / o.temps[i].dph) * 3600;
            timeRemain = (timeRemain > 0) ? formatTimer(timeRemain, false) + " to " + alarm_h + "&deg;<br />" : "";
            $("#dph"+i).html(o.temps[i].dph.toFixed(1) + "&deg;/hr<br />" + timeRemain).show();
        }
        else
          $("#dph"+i).hide();

        var dataIdx = mapJson[i];
        graphData[dataIdx].label = o.temps[i].n;
        if (graphLoaded)
            addGraphPoint(graphData[dataIdx].data, o.time, val);

        var rfsDiv = "#rfs" + i;
        var noiseDiv = "#noise" + i;
        if (typeof o.temps[i].rf !== "undefined")
        {
            var rf = o.temps[i].rf;
            var img, detals;
            if (rf == null)
            {
                img = 0;
                details = "offline";
            }
            else 
            {
                img = rf.s + 1;
                details = "Signal " + rf.s + "/3";
                if (rf.b > 0)
                  details += " Low Battery";
            }

            img = (img * -16) + "px";
            $(rfsDiv).css('background-position', img)
                .attr('title', details)
                .show();
            $(noiseDiv).hide();
        }
        else
        {
            $(rfsDiv).hide();
            if (o.adc.length > 4)
            {
                var noise = o.adc[5-i];
                if (noise < 5)
                  $(noiseDiv).hide();
                else
                  $(noiseDiv).css('background-position', (noise < 20) ? "0px" : "16px")
                      .attr('title', "Noise: " + noise.toString())
                      .show();
            }
        }
    }
    $("#fana").animate({left: o.fan.a + "%"});
    $("#fanc").animate({width: o.fan.c + "%"});
    $("#fanf").animate({width: o.fan.f + "%"});
    $("#fanl").html("Output " + o.fan.c + "%");
    
    updateLid(o.lid);
    updateTime(lastUpdateUtc); //o.time);
    checkRefreshGraphOrUpdate();
}

//either the request timed out or something else happened
function connectionFailure()
{
    updateTime(null);
}

//update the "last updated" time
function updateTime(time)
{
    var color = "#bbb";
    var date;
    if(!time)
    {
        color = "#f33";
        date = new Date();
    }
    else
        date = new Date(time);

    $("#updatedtime")
    .html(formatTime(date, true))
    .css("color", color)
    .attr("title", formatDate(date));
}

function plotToPng(plot, background)
{
    var csrc = plot.getCanvas();
    var c = document.createElement("canvas");
    var ctx = c.getContext("2d");
    c.width = csrc.width;
    c.height = csrc.height;

    ctx.fillStyle = background;
    ctx.fillRect(0, 0, c.width, c.height);
    ctx.drawImage(csrc, 0, 0);

    return c.toDataURL("image/png");
}

function saveAsPng(p)
{
    $("#dl").attr("src", plotToPng(p, "#fff"));
}

function togglePng()
{
    var a, b;
    if ($("#dl").is(":visible"))
    { a = "#png"; b = "#graph"; }
    else
    { a = "#graph"; b = "#png"; }
    $(a).fadeOut('fast', function () { $(b).fadeIn('fast'); });
}

</script>

<style type="text/css">
body { font: normal 13px Arial, sans-serif; background: #f3f1e9; text-align: center; margin: 0; padding: 0; }
h2 { color: #bbb; }
#content { background: #246; border: 1px solid #467; }
#contentframe { background: #000; padding: 10px; }
#probelist { width: 100%; background: #8ab; background: rgba(99, 162, 230, 0.5); border: 1px solid #235; padding: 0; }
td.probe { width: 33%; position: relative; }
.first.probe { border-right: 1px solid #235; }
.last.probe { border-left: 1px solid #235; }
.legbord { border: 1px solid #ccc; padding: 1px; display: inline-block; }
.legfill { width: 14px; height: 14px; }
.dph { color: #003; font-size: 10pt; text-align: right; position: absolute; right: 0; bottom: 0; }
.pname { color: #003; font-size: 18pt; line-height: 16pt; display: inline-block; }
.ptemp { font-size: 32pt; line-height: 26pt; color: #fff; }
.alarmHigh { color: #c00 !important; }
.alarmLow { color: #33f !important; }
#graphtt { display: none; position: absolute; border: 1px solid #89c; background: #eef;
    opacity: 0.9; padding: 2px; color: #003; pointer-events: none; }
#graphtt_title { color: #fff; border: 1px solid #008; background-color: #357; }
#graphtt_arrow { position: absolute; left: 0; top: 0; }
#dialog-overlay { width: 100%; height: 100%; position: fixed;
    top: 0px; left: 0px; display: none; background-color: #000;
    opacity: 0.6; z-index: 2; }
#alarm { background-color: #600; width: 340px; height: 150px;
    border: 5px solid #fff; padding: 10px; color: #fff;
    position: fixed; z-index: 3; top: 100px; display: none;
    left: 50%; margin-left: -240px; }
#alarmclear { display: none; position: absolute; bottom: 4px; right: 4px; color: #ccc; }
.rfstatus { display: none; position: absolute; left: 0; bottom: 0;
    width: 16px; height: 16px; background-image: url('<%=resource%>/rf.png'); }
.noise { display: none; position: absolute; left: 0; bottom: 0;
    width: 16px; height: 16px; background-image: url('<%=resource%>/noise.png'); }
#pidint { width: 200px; background-color: #fcfcfc; border-radius: 5px; 
    border: 1px solid #333; position: absolute; font-size: 10pt;
    bottom: 0px; line-height: 12pt; padding: 3px; display: none; }
.pilabel { width: 7%; color: #555; font-weight: bold; float: left; clear: left; }
.first.pilabel { margin-top: 1px; }
.pival { width: 25%; color: #aaa; text-align: right; float: left; }
.first.pival { margin-top: 1px; }
.pibarcont { position: relative; float: right; width: 65%; border: 1px solid #999;
    background-color: #f0f0f0; }
.pibar { position: relative; }
.pipip { position: absolute; left: 50%; top: 0; width: 1px; height: 100%;
    background-color: #999; }
#navcontainer ul { list-style-type: none; margin-top: 10px; margin-bottom: 0; }
#navcontainer li { display: inline; }
#navcontainer li a { text-decoration: none; color: #f3f1e9;
    padding: 4px 30px 4px 30px; border: 1px solid #000; }
#navcontainer li a:hover { background-color: #246; color: #f3f1e9;
    border: 1px solid #333; }
.noisebtn { color: #555; text-align: center; height: 32px; width: 32px; font-size: 15px;
    border: 1px solid #dcdcdc; line-height: 32px; background-color: #ededed;
    float: right; }
.first.noisebtn { border-radius: 6px 6px 0 0; margin-top: 6px; }
.last.noisebtn { border-radius: 0 0 6px 6px; }
#updatedtime { position: absolute; top: 8px; right: 13px; color: #bbb; font-size: 12pt; }
#lid { position: absolute; top: 8px; left: 13px; color: #bbb; font-size: 12pt; }
#png { display: none; height: 350px; margin: 8px auto 0px auto; }
#noisegraph { display: none; height: 256px; width: 1058px; margin: 8px auto 0px auto; }
#noisegraph_g { height: 256px; width: 1024px; float: left; }
#graph { height: 350px; width: 95%; margin: 8px auto 0px auto; }
#graph_overview { height: 90px; width: 95%; margin-left: auto; margin-right: auto; }
#graph_opts { color: #000; }
#loadindic { display: none; position: relative; top: -320px; z-index: 2; }
#pn0 { color: #bbb; font-size: 28pt; }
#p0container { font-size: 120pt; line-height: 100pt; color: #fff; position: relative; }
#setcontainer { font-size: 22pt; line-height: 22pt; position: absolute; bottom: 0; right:0; }
#backimage { font-family: Trebuchet MS; background: #000 url('<%=resource%>/fire.png') repeat-x scroll left bottom; }
#backoverlay { background: rgba(76,135,199,0.5); }
#fancontainer { background: #357; border: 1px solid #777; height: 20px; position: relative; }
#fanc { position: absolute; left: 0; top: 3px; z-index: 0; background: #008db8;
  width: 0%; height: 14px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; }
#fanf { position: absolute; left: 0; top: 10px; z-index: 1; background: #0ad;
  width: 0%; height: 7px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; }
#fanl { position: absolute; left: 0; top: 1px; z-index: 2; color: #003; font-size: 10pt; }
#fana { position: absolute; left: 0; top: 0; z-index: 3; width: 3px; height: 20px; background: #fe4; opacity: 0.5; }
img.preload { display: none; }
<%=nixio.fs.readfile("/usr/share/linkmeter/user.css") or ""%>
</style>
</head>

<body>
<img src="<%=resource%>/fire.png" class="preload">
<div id="contentframe">
    <div id="content">
<% if rrd then fname = rrd:sub(1, -5) .. ".png"; fshort = nixio.fs.basename(fname) %>
      <h2 onclick="togglePng();">
        <img src="<%=resource%>/picture_save.png" alt="save" title="Save graph image">
        <%=fname%>
        <img src="<%=resource%>/picture_save.png" alt="save" title="Save graph image">
      </h2>
<% else %>
      <div id="backimage"><div id="backoverlay">
        <div id="pn0">Pit</div>
        <div id="updatedtime">00:00:00 AM</div>
        <div id="lid" title="Click to toggle lid mode"></div>
        <div id="p0container" >
          <span id="temp0">---</span>
          <div id="setcontainer">Set <span id="set">---</span>&deg;
          </div>
          <div id="pidint">
            <div class="pibarcont">
              <div class="pibar" id="pibb">&nbsp;</div>
              <div class="pibar" id="pibp">&nbsp;</div>
              <div class="pibar" id="pibi">&nbsp;</div>
              <div class="pibar" id="pibd">&nbsp;</div>
              <div class="pipip"></div>
            </div>
            <div class="pilabel first">B</div>
            <div class="pival first" id="pivb">-%</div>
            <div class="pilabel">P</div>
            <div class="pival" id="pivp">-%</div>
            <div class="pilabel">I</div>
            <div class="pival" id="pivi">-%</div>
            <div class="pilabel">D</div>
            <div class="pival" id="pivd">-%</div>
            <div class="pilabel">dT</div>
            <div class="pival" id="pivdt">-&deg;</div>
          </div>
          <div class="rfstatus" id="rfs0"></div>
          <div class="noise" id="noise0"></div>
        </div>

        <div id="fancontainer">
            <div id="fanc"></div>
            <div id="fanf"></div>
            <div id="fanl"></div>
            <div id="fana"></div>
        </div>

        <table id="probelist"><tr>
            <td class="probe first">
                <div class="dph" id="dph1"></div>
                <div class="rfstatus" id="rfs1"></div>
                <div class="noise" id="noise1"></div>
                <div class="legbord"><div class="legfill" id="pl1"></div></div>
                <div class="pname" id="pn1">-</div>
                <div class="ptemp" id="temp1">-</div>
            </td>
            <td class="probe">
                <div class="dph" id="dph2"></div>
                <div class="rfstatus" id="rfs2"></div>
                <div class="noise" id="noise2"></div>
                <div class="legbord"><div class="legfill" id="pl2"></div></div>
                <div class="pname" id="pn2">-</div>
                <div class="ptemp" id="temp2">-</div>
            </td>
            <td class="probe last">
                <div class="dph" id="dph3"></div>
                <div class="rfstatus" id="rfs3"></div>
                <div class="noise" id="noise3"></div>
                <div class="legbord"><div class="legfill" id="pl3"></div></div>
                <div class="pname" id="pn3">-</div>
                <div class="ptemp" id="temp3">-</div>
            </td>
        </tr></table>
      </div></div>
<% end %>
      <div style="position: relative;">
        <div id="png"><img id="dl" alt="<%=fshort%>"></div>
        <div id="noisegraph">
          <div id="noisegraph_g"></div>
<% if context.authuser == "root" then %>
          <div class="noisebtn first">0</div>
          <div class="noisebtn">1</div>
          <div class="noisebtn">2</div>
          <div class="noisebtn">3</div>
          <div class="noisebtn">4</div>
          <div class="noisebtn last">5</div>
<% end %>
        </div>
        <div id="graph"></div>
        <div id="graph_overview"></div>
        <div id="loadindic"><img src="<%=resource%>/loading.gif" style="width: 126px; height: 22px;"></div>
      </div>
    </div>
    <div id="navcontainer">
        <ul>
            <%
        if context.authuser ~= "root" then
          write("<li><a href=%q>Login</a></li>" % build_url("admin/lm/home"))
        end
        write("<li><a href=%q>Alarms</a></li>" % build_url("admin/lm/alarm"))
        write("<li><a href=%q>Archive</a></li>" % build_url("admin/lm/archive"))
        write("<li><a href=%q>Configuration</a></li>" % build_url("admin/lm"))
        %>
        </ul>
    </div>
</div>
<div id="graph_opts">
    <input type="checkbox" id="showfan" checked="checked"/><label for="showfan">Show fan speed</label>
    <select id="rangeselect">
        <option value="" selected>Auto scale</option>
        <option value="460">1 hour</option>
        <option value="360">6 hours</option>
        <option value="240">12 hours</option>
        <option value="0">24 hours</option>
    </select>
</div>
<div id="graphtt">
    <div id="graphtt_title"></div>
    <div id="graphtt_content"></div>
    <img id="graphtt_arrow" src="<%=resource%>/ttarrow.png">
</div>
<div id="dialog-overlay"></div>
<div id="alarm">
    <h2></h2>
    <p></p>
    <div id="alarmclear"></div>
</div>
<img src="<%=resource%>/noise.png" class="preload">
<img src="<%=resource%>/rf.png" class="preload">
</body>

</html>
