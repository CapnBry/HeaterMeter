<%
  local rrd = luci.http.formvalue("rrd")
  require "lmclient"
-%>
<!doctype html public "-//W3C//DTD HTML 4.0//EN">
<html>
<head>
<link rel="icon" type="image/png" href="<%=resource%>/boxy-color.png" sizes="192x192">
<link rel="icon" type="image/x-icon" href="<%=resource%>/favicon.ico">
<title>HeaterMeter BBQ Control</title>
<script language="javascript" src="<%=resource%>/js/jquery-all.js" type="text/javascript"></script>
<!--[if lte IE 8]><script language="javascript" type="text/javascript" src="<%=resource%>/js/excanvas.min.js"></script><![endif]-->
<script language="javascript" type="text/javascript">
// mapJson translates the json temps array index to graphData index
const mapJson = [8,7,6,5];
let lastPlot;
let lastOverviewPlot;
let lastGraphHover = 0;
let lastLidOpen = -1;
let lastPeaks;
let lastUpdateUtc = 0;
let graphLoadedUtc = 0;
let graphData =  [
        { label: "Output", color: "#6cf", lines: { show: true, lineWidth: 1, fill: true }, shadowSize: 0, yaxis: 2, data: [] },
        { label: "Fan", color: "#6cf", lines: { show: false, lineWidth: 1, fill: true }, shadowSize: 0, yaxis: 2, data: [] },
        { label: "Servo", color: "#6cf", lines: { show: false, lineWidth: 1, fill: true }, shadowSize: 0, yaxis: 2, data: [] },
        { label: "", color: "#fd9", lines: { show: true, lineWidth: 1, fill: true }, shadowSize: 0, yaxis: 2, data: [] },  // lidopen
        { label: "Set", color: "rgba(255,0,0,0.8)", lines: { show: true, lineWidth: 1 }, shadowSize: 0, data: [] },
        { label: "Food3", lines: { show: true }, data: [] },
        { label: "Food2", lines: { show: true }, data: [] },
        { label: "Food1", lines: { show: true }, data: [] },
        { label: "Pit", lines: { show: true, lineWidth: 3 }, data: [] },
        { label: "Peaks", color: "#fff", lines: { show: false }, points: { show: true, radius: 3 }, data: [], noclear: true }
    ];

    let graphOpts = {
        legend: { show: false },
        canvas: true,
        series: {
            lines: { show: true, lineWidth: 2 },
            points: { show: false, symbol: "circle", radius: 1, fill: false },
            shadowSize: 4
        },
        xaxis: { show: true, mode: "time", timezone: "browser",
          font: { color: "#ccc" } },
        yaxis: { show: true, ticks: 10, font: { color: "#ccc" } },
        yaxes: [ { position: "right" }, { min: 0, max: 100 } ],
        grid: { clickable: true, hoverable: true, color: "#ccc",
          borderColor: "#545454" }
    };
    let graphOpts2 = {
        legend: { show: false },
        canvas: false,
        series: {
            lines: { show: true, lineWidth: 1 },
            points: { show: false, radius: 0 },
            shadowSize: 0
        },
        xaxis: graphOpts.xaxis,
        yaxis: { show: false },
        yaxes: graphOpts.yaxes, 
        grid: { clickable: false, color: "#ccc", borderColor: "#545454" },
        selection: { mode: "x" }
    };

$(document).ready(function()
{
    loadPrefs();
    copyUserColors();

    graphOpts.legend.container = $("#graph_legend");
    $("#graph_overview").bind("plotselected", overviewSelected);
    $("#graph_overview").bind("plotunselected", overviewUnselected);
    $("#graphtt").click(graphttClicked);
    $("#outputselect").change(outputSelectChanged);
    $("#rangeselect").change(rangeSelectChanged);
    $("#graph").bind("plothover", graphHover);
    $("#graphcontainer").bind("mouseleave", function () { $("#graphtt").fadeOut(); });
    $("div.legfill").click(legendClicked);
    $("#fancontainer").click(togglePidInt);
    $(document).keydown(keyPressed);

<% if context.authuser == "root" then %>
    $(".noisebtn").click(noisebtnClicked);
    $(".noise").click(noisebtnClicked);
    $(".alarmact").click(alarmBtnClicked);
    $(".pname").editable(nameChanged, {cssclass: "jedit", maxlength: 13, select: true});
    $("#pn0").editable(nameChanged, {cssclass: "jedit", maxlength: 13, width: "13em", select: true});
    $("#set").editable(tempChanged, {cssclass: "jedit", style: "display: inline", select: true});
    
    $("#lid").click(function () { 
        if (lastLidOpen == -1) return;
        $(this).html("Toggling...");
        let enable = (lastLidOpen == 0) ? ",,1" : ",,0";
        $.post("<%=build_url("admin/lm/set")%>", {ld: enable});
    });
    
    $("#alarmclear").click(function () {
        $(this).html("Silencing...");
        $.post("<%=build_url("admin/lm/set")%>", {al: "0,0,0,0,0,0,0,0"});
    }).show();
        
<% end %>
<% if not rrd then %>
    let o = <%= LmClient():query("$LMSU") or "{}" %>;
    let now = +new Date();
    if ((now - 10000) < (o.time * 1000))
        connectionSuccess(o);
<% end %>
    refreshGraphData();
});

$(window).load(function ()
{
<% if not rrd then %>
    if (!!window.EventSource) {
        let source = new EventSource("<%=build_url("lm/stream")%>");
        source.addEventListener("hmstatus", function(e) {
            let o = JSON.parse(e.data);
            connectionSuccess(o);
        });
        source.addEventListener("log", function (e) {
            if (e.data.substr(9, 6) == "NOISE ")
                graphNoise(e.data, 0);
            else
                console.log(e.data);
        });
        source.addEventListener("noisedump", function (e) {
            graphNoise(e.data, 1);
        });
        source.addEventListener("alarm", function (e) {
            let o = JSON.parse(e.data);
            alarmEvent(o);
        });
        source.addEventListener("error", connectionFailure);
        source.addEventListener("pidint", function (e) {
            let o = JSON.parse(e.data);
            pidIntEvent(o);
        });
        source.addEventListener("peaks", function (e) {
            let o = JSON.parse(e.data);
            peakEvent(o);
        });
    } else {
        if (lastUpdateUtc == 0) // will be set in .ready if bundled update was fresh
            JSONQuery();
        window.setInterval(JSONQuery, 10000);
    }

    document.addEventListener('visibilitychange', function(){
        if (!document.hidden)
            checkRefreshGraphOrUpdate(false);
    });
<% end %>
});

function copyUserColors()
{
    // Set colors of the graph and temp shadows to match the CSS
    for (let srs=0; srs<4; ++srs)
    {
      let color = $(".pcolor" + srs).css("background-color");
      $("#temp" + srs).css("text-shadow", "2px 2px 1px " + color);
      graphData[mapJson[srs]].color = color;
    }
    graphData[0].color = $(".ooutcolor").css("background-color");
    graphData[1].color = $(".ofancolor").css("background-color");
    graphData[2].color = $(".osercolor").css("background-color");
}

function storePref(k, v)
{
  if ("localStorage" in window && window["localStorage"] !== null)
    localStorage[k] = v;
}

function loadPrefs()
{
  if ("localStorage" in window && window["localStorage"] !== null)
  {
    $("#rangeselect").val(localStorage["prefs.graphrange"] || "");
    let graphlines = localStorage["prefs.graphlines"] || "0345678";
    for (i=0; i<graphData.length; ++i)
      graphData[i].lines.show = graphlines.indexOf(i) != -1;

    // If fan and servo enabled, that's outputselect 4
    if (graphlines.substr(0, 2) == "12")
      $("#outputselect").val(4);
    else
    {
      // The first graphline is which output is selected
      let output = parseInt(graphlines.substr(0, 1))
      if (output < 3)
        $("#outputselect").val(output+1);
      else
        $("#outputselect").val(0);
    }

    // Remove the old pref.graphlines from before output details. Now is prefs.graphlines
    if (localStorage["pref.graphlines"])
      localStorage.removeItem("pref.graphlines");
  }
}

function storePrefGraphlines()
{
  let graphlines = "";
  for (i=0; i<graphData.length; ++i)
    if (graphData[i].lines.show)
      graphlines += i;
  storePref("prefs.graphlines", graphlines);
}

function rangeSelectChanged()
{
  storePref("prefs.graphrange", $("#rangeselect").val());
  refreshGraphData();
}

function alarmEvent(o)
{
  if (o.atype)
  {
    $("#dialog-overlay").show();
    $("#alarmclear").html("Silence");
    $("#alarm h2").text(o.pn);
    $("#alarm p").html('Alarm (' + o.atype + ') trigged at ' +
      o.c + '&deg; exceeds threshold ' + o.t + '&deg;');
    $("#alarm").show("fast");
  }
  else
  {
    $("#alarm").hide("fast");
    $("#dialog-overlay").hide();
  }
}

function keyPressed(e)
{
  if (this !== e.target && e.target.type == "text")
    return;
  switch (e.which)
  {
    case 78: // N
      toggleNoiseGraph();
      break;
    case 80: // P
      togglePidInt();
      break;
  }
}

function toggleNoiseGraph()
{
  let target = $('#noisegraph').css('display') === 'none' ? '#nn0' : '#noiseoff';
  $(target).trigger('click');
}

function togglePidInt()
{
  if ($("#pidint").is(":visible"))
    // Use a timeout on success to make sure the next (final) update
    // doesn't turn the display back on and leave it on
    $.post("<%=build_url("admin/lm/set")%>", {tp: 0},
      function () { $("#pidint").delay(1000).fadeOut('fast'); }
    );
  else
    $.post("<%=build_url("admin/lm/set")%>", {tp: 1});
}

function pidIntBar(target, val)
{
  val = (val > 100) ? 100 : (val < -100) ? -100 : val;
  if (val > 0)
    $(target).css({
      "left": "50%",
      "width": val/2 + "%",
      "background-color": "#74b931"});
  else
    $(target).css({
      "left": 50 + val/2 + "%",
      "width": -val/2 + "%",
      "background-color": "#ce3b46"});
}

function pidIntEvent(o)
{
  $("#pidint").show('fast');
  $("#pivp").html(o.p.toFixed(1) + "%"); pidIntBar("#pibp", o.p);
  $("#pivi").html(o.i.toFixed(1) + "%"); pidIntBar("#pibi", o.i);
  $("#pivd").html(o.d.toFixed(1) + "%"); pidIntBar("#pibd", o.d);
  $("#pivdt").html(o.t.toFixed(2) + "&deg;");
}

function peakEvent(o)
{
  lastPeaks = o;
  //let data = [];
  if (o.H.time) { o.H.time *= 1000; /* data.push([o.H.time, o.H.val]); */ }
  if (o.L.time) { o.L.time *= 1000; /* data.push([o.L.time, o.L.val]); */ }
  if (o.C.time) { o.C.time *= 1000; /* data.push([o.C.time, o.C.val]); */ }
  // do not display the peaks on the graph
  //graphData[9].data = data;
  // Wait until next updateGraph() to display
}

function graphNoise(s, version)
{
  const FREQ = 16000000 / 128 / 13;
  // Convert s to an array of int => vals
  let vals;
  if (version == 0) // Log Message "NOISE 0 1 2 3 4 5..."
  {
    vals = s.substr(15, s.length - 18).split(' ').map(function(x) { return parseInt(x); });
  } // version 0
  else { // version = 1, differential encoded "+NNN.+-"
    const noisediffsRe = /[\+\-\.][0-9]*/g;
    let curr = 0;
    vals = s.match(noisediffsRe).map(function(x) {
      if (x == '.')
        return curr;
      if (x == '+')
        return ++curr;
      if (x == '-')
        return --curr;

      curr += parseInt(x);
      return curr;
    });
  } // version 1
  // Make a copy of vals and sort them while it is still an array of int
  let sorted = vals.slice(0).sort(function(a,b) {return a - b;});

  // Average vals and convert to array of [x, y]
  let avg = 0;
  for (let i=0; i<vals.length; ++i)
  {
    avg += vals[i];
    vals[i] = [i * 1000 / FREQ, vals[i]];
  }
  avg /= vals.length;

  // Plot
  let MAX = (vals.length - 1) * 1000 / FREQ;
  let median = sorted[Math.floor(sorted.length/2)];
  let marray = [[0,median], [MAX,median]];
  let aarray = [[0,avg], [MAX,avg]];
  $.plot("#noisegraph_g", [ vals,
      { label: "Median", data: marray },
      { label: "Average", data: aarray }
    ], { legend: { backgroundColor: "#333" },
      xaxis: { font: { color: "#ccc" }, ticks: 16 },
      yaxis: { font: { color: "#ccc" }, minTickSize: 1, tickDecimals: 0 },
      grid: { color: "#999" } }
  );
  $("#noisegraph").show();
}

function legendClicked()
{
    // The ID should be "pl?" so pull the json probe index off the end
    // and get the graphdata index
    let idx = mapJson[parseInt(this.id.substr(-1))];
    graphData[idx].lines.show = !graphData[idx].lines.show;
    storePrefGraphlines();
    updateGraph();
}

function noisebtnClicked()
{
    let probe = $(this).data('adc');
    $.post("<%=build_url("admin/lm/set")%>",
      {tp: "," + probe },
      function () { if (probe == 255) $('#noisegraph').hide(); }
    );
}

function alarmBtnClicked()
{
    let probe = this.id.substr(-1);
    let tempdiv = $('#temp' + probe);
    // Only one alarm can be ringing so silence all if this probe shows alarm state
    if (tempdiv.hasClass('alarmHigh') || tempdiv.hasClass('alarmLow'))
        $.post("<%=build_url("admin/lm/set")%>", {al: "0,0,0,0,0,0,0,0"});
}

function refreshGraphData()
{
    //console.log("Graph updating " + new Date().toString());
    $("#graphtt").fadeOut();
    $("#rangeselect").prop("disabled", true);
    $("#loadindic").show();
    if (lastOverviewPlot)
    {
      lastOverviewPlot.clearSelection(true);
      graphOpts.xaxis.min = null;
      graphOpts.xaxis.max = null;
    }
    graphLoadedUtc = 0;

    $.each(graphData, function() {
        if (!this.noclear) this.data = [];
    });
    
    let range = $("#rangeselect").val();
    let params = {nancnt: range};
    <% if rrd then write("params.rrd = '"..rrd.."'; graphOpts.canvas = true;") end %>
    $("#dlcsv").attr("href", "<%=build_url("lm/hist")%>?dl=1&hdr=1&" + $.param(params));
    $.ajax({
        type: "GET",
        url: "<%=build_url("lm/hist")%>",
        data: params,
        dataType: "text",
        success: tstatSuccess,
        error: clearLoadingIndic
    });
}

function clearLoadingIndic()
{
    $("#loadindic").hide();
    $("#rangeselect").removeAttr("disabled");
}

function outputSelectChanged()
{
    let val = $("#outputselect").val();

    graphData[0].lines.show = false;
    graphData[1].lines.show = false;
    graphData[2].lines.show = false;
    graphData[3].lines.show = false;

    // special case for 4 = show Fan(1) and Servo(2)
    if (val == 4)
    {
        graphData[1].lines.show = true;
        graphData[2].lines.show = true;
        graphData[3].lines.show = true;
    }
    else if (val > 0)
    {
        graphData[val-1].lines.show = true;
        graphData[3].lines.show = true;
    }
    storePrefGraphlines();
    updateGraph();
}

function doPlot()
{
    lastPlot = $.plot($("#graph"), graphData, graphOpts);
}

function updateGraphRanges(from, to)
{
    $("#graphtt").fadeOut();
    graphOpts.xaxis.min = from;
    graphOpts.xaxis.max = to;
    doPlot();
}

function overviewSelected(event, ranges)
{
    updateGraphRanges(ranges.xaxis.from, ranges.xaxis.to);
}

function overviewUnselected()
{
    updateGraphRanges(null, null);
}

function formatTime(date, includeSeconds)
{
    if (includeSeconds)
        return $.plot.formatDate(date, "%l:%M:%S %P");
    else
        return $.plot.formatDate(date, "%l:%M %P");
}

function formatDate(date)
{
    return $.plot.formatDate(date, "%y %b %d, %l:%M %P");
}

function formatTimer(secs, includeSeconds)
{
    let hours = Math.floor(secs / 3600);
    secs -= hours * 3600;
    let mins = Math.floor(secs / 60);
    secs -= mins * 60;

    let retVal = "";
    if (hours > 0)
        retVal = hours + "h";
    if (mins > 0)
        retVal += mins + "m";
    if (includeSeconds && secs > 0)
        retVal += secs + "s";

    return retVal;
}

function lerp(n1, n2, frac)
{
    return (n1 * (1.0 - frac)) + (n2 * frac);
}

function graphHover(event, pos, item)
{
    let now = +new Date();
    if (now - lastGraphHover > 100)
    {
        graphClicked(event, pos, item); 
        lastGraphHover = now;
    }
}

function graphttClicked()
{
    // Only dismiss if it has been less than 100ms since the tooltip cam up
    // to prevent immediate dismiss on touch devices
    let now = +new Date();
    if (now - lastGraphHover > 100)
    {
        // After clicking the tooltip to dismiss it, don't show again for 1s
        lastGraphHover = now + 1000;
        $(this).fadeOut();
    }
}

function graphClicked(event, pos, item)
{
    let sInfo = "";
    let srsClosestY = -1;
    let srsClosestYIdx;
    // Display on tooltip as Pit, Food1, Food2, Amb, Set, Output, Fan, Servo
    let SERIES_DISPLAY_ORDER = [ 8, 7, 6, 5, 4, 0, 1, 2 ];
    for (let idx=0; idx<SERIES_DISPLAY_ORDER.length; ++idx)
    {
        let srs = SERIES_DISPLAY_ORDER[idx];
        let val = NaN;
        let firstPastIdx = -1;
        let srsData = graphData[srs].data;
        
        for (let i=0; i<srsData.length; ++i)
        {
            if (pos.x <= srsData[i][0]  && !isNaN(srsData[i][1]))
            {
                firstPastIdx = i;
                break;
            }
        }
        
        if (firstPastIdx == -1)
            continue;
                
        // This must either be the point at the same timestamp as where you 
        // clicked or you must click between two points.  If you click off to 
        // the left of the first point or to the right of the last, we don't 
        // use that value because you've clicked outside the range of valid data. 
        let ptR = srsData[firstPastIdx];
        if (item && item.datapoint[0] == ptR[0])
            val = ptR[1];
        else if (firstPastIdx != 0)
        {
            let ptL = srsData[firstPastIdx-1];
            let timeDiff = ptR[0] - ptL[0];
            val = lerp(ptL[1], ptR[1], (pos.x - ptL[0]) / timeDiff);
        }
            
        if (!isNaN(val))
            if (srs == 0 || srs == 1 || srs == 2)
            {
                if (val >= 0)
                    sInfo = sInfo + "<b>" + graphData[srs].label + "</b> " + Math.round(val) + "%<br />";
            }
            else 
            {
                sInfo = sInfo + graphData[srs].label + " " + val.toFixed(1) + "&deg;<br />";

                // Save the series with the closest Y point to where the mouse is 
                if (srsClosestY == -1 ||
                    Math.abs(srsData[firstPastIdx][1] - pos.y) < 
                    Math.abs(graphData[srsClosestY].data[srsClosestYIdx][1] - pos.y))
                {
                    srsClosestY = srs;
                    srsClosestYIdx = firstPastIdx;
                }
            }
                  
    }  /* for srs */
    
    if (sInfo == "")
        $("#graphtt").fadeOut();
    else
    {
        if (srsClosestY != -1)
        {
            let axisY = lastPlot.getYAxes()[0];
            let valY = graphData[srsClosestY].data[srsClosestYIdx][1];
            // Adjust page positions to be relative to #graphcontainer
            // 8 = lastPlot.getPlotOffset().top
            pos.pageY = axisY.p2c(valY) + 8;
        }
        let sPeakInfo = "";
        let sPeakClass = "";
        if (lastPeaks)
        {
          let distH, distL;
          if (lastPeaks.H.time) distH = Math.abs(pos.x - lastPeaks.H.time);
          if (lastPeaks.L.time) distL = Math.abs(pos.x - lastPeaks.L.time);
          let peakRef;
          if (distH && distL)
          {
            if (distH < distL)
              peakRef = lastPeaks.H;
            else
              peakRef = lastPeaks.L;
          }
          else if (distH)
            peakRef = lastPeaks.H;
          else if (distL)
            peakRef = lastPeaks.L;
          if (peakRef && Math.abs(pos.x - peakRef.time) < 300000)
          {
            let peakDesc = peakRef.trend > 0 ? "High" : "Low";
            sPeakClass = peakRef.trend > 0 ? "hotback" : "coldback";
            sPeakInfo = peakDesc + " Peak " + peakRef.val + "&deg;<br />";
            if (peakRef.period)
              sPeakInfo += "Period: " + peakRef.period + "s ";
            if (peakRef.half)
              sPeakInfo += "Half: " + peakRef.half + "s " + peakRef.amp.toFixed(2) + "&deg;<br />";
          }
        }
        
        let d = new Date(pos.x);
        $("#graphtt_title").html(formatTime(d, false));
        $("#graphtt_content").html(sInfo);
        $("#graphtt_peak").html(sPeakInfo).removeClass("hotback coldback").addClass(sPeakClass);
        let ttWidth = $("#graphtt").outerWidth();
        let ttHeight = $("#graphtt").outerHeight();
        $("#graphtt_arrow").css({left: ttWidth/2 - 7});
        $("#graphtt")
            .css({left: pos.pageX - (ttWidth/2) - 11, top: pos.pageY - ttHeight - 5})
            .show();
    }
}

function addGraphPoint(d, time, temp)
{
    // if the last two points have the same value as the
    // new point just update the time on the last point
    if (d.length > 1)
    {
        let p1 = d[d.length-2];
        let p2 = d[d.length-1];
        if (p1[1] == temp && p2[1] == temp)
        {
            p2[0] = time;
            return;
        }
    }
    // The RRD may start with a ton of NaN, don't put them into the graph
    // because otherwise it makes a blank space until the first real value
    else if (d.length == 0 && isNaN(temp))
        return;

    d.push([time, temp]);
}

function updateGraph()
{
    // we want to save the selected area, and if the selection is to the
    // end of the graph, extend it to include the new point
    let selectedArea;
    let extendSelection = false;

    if (lastOverviewPlot)
        selectedArea = lastOverviewPlot.getSelection();
    if (selectedArea && selectedArea.xaxis.to == lastOverviewPlot.getAxes().xaxis.max)
        extendSelection = true;
    if (selectedArea)
      lastOverviewPlot.clearSelection(false); 
      
    // Hide the peaks on the overview graph
    graphData[9].points.show = false;
    lastOverviewPlot = $.plot($("#graph_overview"), graphData, graphOpts2);
    graphData[9].points.show = true;
    
    if (extendSelection)
        selectedArea.xaxis.to = lastOverviewPlot.getAxes().xaxis.max;
    if (selectedArea)
        lastOverviewPlot.setSelection(selectedArea);
    else
        doPlot();
}

function addOutputGraphPoint(time, value)
{
    // The output graph is unique in that it holds both the output and the liddetect
    // If value is negative then add a 100% point to the lid indicator series
    // If value is positive it is the composite output value
    if (isNaN(value))
        return;

    if (value < 0)
    {
        addGraphPoint(graphData[0].data, time, 0);
        addGraphPoint(graphData[3].data, time, 100);
    } 
    else 
    {
        addGraphPoint(graphData[0].data, time, value);
        addGraphPoint(graphData[3].data, time, -1);
    }
}

function tstatSuccess(csv)
{
    // mapCsv translates csv field index to graphData index
    // a graphData index of -1 means not to map it
    const mapCsv = [-1,4,8,7,6,5,0,1,2];

    clearLoadingIndic();
    $.each(csv.split('\n'), function (){
        if (this == "") return;
        let line = this.split(",");
        if (line.length > mapCsv.length) return;
        line[0] = line[0] * 1000;
        for (let valIdx=1; valIdx<line.length; ++valIdx)
        {
            let dest = mapCsv[valIdx];
            if (dest < 0)
                continue;
            let value = parseFloat(line[valIdx]);
            if (dest == 0)
                addOutputGraphPoint(line[0], value);
            else
                addGraphPoint(graphData[dest].data, line[0], value);
        }
    });
    graphLoadedUtc = +new Date();
    updateGraph();
}

function nameChanged(value, settings)
{
    let params = {}; params[this.id] = value;
    $.post("<%=build_url("admin/lm/set")%>", params);
    return value;
}

function tempChanged(value, settings)
{
    if (value.length > 0)
    {
        $.post("<%=build_url("admin/lm/set")%>", {sp: value});
        return value;
    }
    else return "err";
}

function JSONQuery()
{
    $.ajax({
        type: "GET",
        url: "<%=build_url("lm/hmstatus")%>",
        dataType: "json",
        timeout: 5000,
        success: connectionSuccess,
        error: connectionFailure
    });
}

/* find out how many points we have on the graph and
requery the server for an updated consolidation
if we have too much data. If force is true,
the requery is forced, so long as it wasn't just performed */
function checkRefreshGraphOrUpdate(force)
{
    if (graphLoadedUtc === 0)
        return;

    let max = 0;
    //let summary = "";
    $.each(graphData, function () {
        // The data can accumulate in the array while the browser tab
        // isn't visible. Keep at least 504 points, but grow as much as twice that
        // After this slice, the data arrays will have different time ranges.
        // Keeping it above 504 means the next update will force a reload,
        // but the old data will display when the tab becomes active
        if (this.data.length > 504*2)
            this.data = this.data.slice(-504);
        if (this.data.length > max)
            max = this.data.length;
        //summary += `${this.label}=${this.data.length} `;
    });
    //console.log(summary);

    if (document.hidden)
        return;

    // Only allow a force refresh if the graph is more than 14 seconds old
    force = force && ((new Date() - graphLoadedUtc) > 14000);

    // the RRD holds up to 480 points and the graph holds
    // less due to point consolidation, so best case
    // scenario 24pts * 10sec per poll = 4mins
    if (force || max > 504)
        refreshGraphData()
    else
        updateGraph();
}

function updateLid(val)
{
    let lid = $("#lid");
    if (val == 0)
    {
        if (lastLidOpen != 0)
          lid.html("Lid Closed").css("color", "#bbb");
    }
    else
    {
        if (lastLidOpen < 1)
          lid.css("color", "#fc3");
        lid.html("Lid Open " + formatTimer(val, true));
    }
    lastLidOpen = val;
}

function updateAlarmsIcon(o, i)
{
    if (o.temps[i].a)
    {
        let alarmdiv = "#alarm" + i;
        let lo = o.temps[i].a.l;
        let hi = o.temps[i].a.h;

        if (lo > 0 && hi > 0)
            $(alarmdiv).css('background-position', '0px')
              .attr('title', 'Alarms active:\n' + lo + ' low and ' + hi + ' high')
              .show();
        else if (lo > 0)
            $(alarmdiv).css('background-position', '-16px')
              .attr('title', 'Alarm active:\n' + lo + ' low')
              .show();
        else if (hi > 0)
            $(alarmdiv).css('background-position', '-32px')
              .attr('title', 'Alarm active:\n' + hi + ' high')
              .show();
        else
            $(alarmdiv).hide();
    }
}

function updateNoiseIcon(o, i)
{
    let noiseDiv = "#noise" + i;
    if (o.adc && o.adc.length > 4)
    {
        let noise = o.adc[5-i];
        if (noise < 2)
            $(noiseDiv).hide();
        else
            $(noiseDiv).css('background-position', (noise < 5) ? "0px" : "-16px")
                .attr('title', "Noise: " + noise.toString())
                .show();
    }
}

function updateRfIcon(o, i)
{
    let rfsDiv = "#rfs" + i;
    if (o.temps[i].hasOwnProperty('rf'))
    {
        let rf = o.temps[i].rf;
        let img, details;
        if (rf == 0)
        {
            img = 0;
            details = "offline";
        }
        else 
        {
            img = rf.s + 1;
            details = "Signal " + rf.s + "/3";
            if (rf.b > 0)
                details += " Low Battery";
        }

        img = (img * -16) + "px";
        $(rfsDiv).css('background-position', img)
            .attr('title', details)
            .show();
    }
    else
        $(rfsDiv).hide();
}

function connectionSuccess(o)
{
    let updateEditables = ($("form.jedit").length == 0);
    if (updateEditables)
    {
      let setDisplay = o.set;
      if (setDisplay === null)
        setDisplay = "Off";
      else if (setDisplay <= 0)
        setDisplay = (-setDisplay) + "%";
      else
        setDisplay = setDisplay + "&deg;";
      $("#set").html(setDisplay);
    }

    o.time *= 1000;
    let lastUpdateGap = 0;
    if (lastUpdateUtc !== 0 && lastUpdateUtc <= o.time)
        lastUpdateGap = o.time - lastUpdateUtc;
    lastUpdateUtc = o.time;

    if (graphLoadedUtc > 0)
    {
        addOutputGraphPoint(o.time, o.lid > 0 ? -o.lid : o.fan.c);
        if (o.fan.f !== null)
          addGraphPoint(graphData[1].data, o.time, o.fan.f);
        if (o.fan.s !== null)
          addGraphPoint(graphData[2].data, o.time, o.fan.s);
        if (o.set !== null && o.set > 0)
          addGraphPoint(graphData[4].data, o.time, o.set);
    }

    // If control probe has a value, set the window title to that value
    let title = 'HeaterMeter BBQ Control';
    if (o.temps[0].c !== null && o.set !== null)
      title = '(' + o.temps[0].c.toFixed(1) + ' ' + o.temps[0].n + ') ' + title;
    document.title = title;

    for(let i = 0; i < 4; i++)
    {
        if (updateEditables) $("#pn" + i).text(o.temps[i].n);
        $("#nn" + i).text(o.temps[i].n);
        let val = o.temps[i].c;
        let tempElem = $("#temp" + i);
        if (val === null)
        {
            val = NaN;
            tempElem.text("off");
        }
        else
            tempElem.html(val.toFixed(1) + "&deg;");

        if (o.temps[i].a.r == 'H')
            tempElem.removeClass("alarmLow").addClass("alarmHigh");
        else if (o.temps[i].a.r == 'L')
            tempElem.removeClass("alarmHigh").addClass("alarmLow");
        else
            tempElem.removeClass("alarmLow alarmHigh");

        if (val && o.temps[i].dph && o.temps[i].dph >= 1.0)
        {
            let alarm_h = +o.temps[i].a.h;
            let timeRemain = ((alarm_h - val) / o.temps[i].dph) * 3600;
            timeRemain = (timeRemain > 0) ? formatTimer(timeRemain, false) + " to " + alarm_h + "&deg;<br />" : "";
            $("#dph"+i).html(o.temps[i].dph.toFixed(1) + "&deg;/hr<br />" + timeRemain).show();
        }
        else
          $("#dph"+i).hide();

        let dataIdx = mapJson[i];
        graphData[dataIdx].label = o.temps[i].n;
        if (graphLoadedUtc > 0)
            addGraphPoint(graphData[dataIdx].data, o.time, val);

        updateAlarmsIcon(o, i);
        updateNoiseIcon(o, i);
        updateRfIcon(o, i);
    }
    if (o.ramp)
    {
        $("#ramp").html("Ramping " + o.ramp.s + "&deg; to " + o.ramp.ta + "&deg;")
          .show();
        $("#setcontainer").addClass("ramp");
    }
    else
    {
        $("#ramp").hide();
        $("#setcontainer").removeClass("ramp");
    }
    $("#fana").animate({left: o.fan.a + "%"});
    $("#fanc").animate({width: o.fan.c + "%"});
    $("#fanf").animate({width: o.fan.f + "%"});
    let outputDesc = "Output " + o.fan.c + "%";
    // Only display output details if the output, fan, and servo don't have the same value
    if (o.fan.c !== o.fan.f || o.fan.c !== o.fan.s)
    {
      if (o.fan.hasOwnProperty('f') && o.fan.f !== null)
        outputDesc = outputDesc + " / Fan " + o.fan.f + "%";
      if (o.fan.hasOwnProperty('s') && o.fan.s !== null)
        outputDesc = outputDesc + " / Servo " + o.fan.s + "%";
    }
    $("#fanl").html(outputDesc);
    
    updateLid(o.lid);
    updateTime(lastUpdateUtc); //o.time);
    // Force graph update if the last tick was more than 15 seconds ago, the
    // updates should come at least every 5 seconds (streaming) or 10 seconds (polled)
    checkRefreshGraphOrUpdate(lastUpdateGap > 15000);
}

//either the request timed out or something else happened
function connectionFailure()
{
    updateTime(null);
}

//update the "last updated" time
function updateTime(time)
{
    let color = "#bbb";
    let date;
    if(!time)
    {
        color = "#f33";
        date = new Date();
    }
    else
        date = new Date(time);

    $("#updatedtime")
    .html(formatTime(date, true))
    .css("color", color)
    .attr("title", formatDate(date));
}

function plotToPng(plot, background)
{
    let csrc = plot.getCanvas();
    let c = document.createElement("canvas");
    let ctx = c.getContext("2d");
    c.width = csrc.width;
    c.height = csrc.height;

    ctx.fillStyle = background;
    ctx.fillRect(0, 0, c.width, c.height);
    ctx.drawImage(csrc, 0, 0);

    return c.toDataURL("image/png");
}

function downloadPng()
{
    $("#download input[name=uri]").val(
      plotToPng(lastPlot, $("#download").css("background-color"))
    );
    $("#download").submit();
}

</script>

<style type="text/css">
body { font: normal 13px Arial, sans-serif; color: #999; background: #f3f1e9; text-align: center; margin: 0; padding: 0; }
h2 { color: #bbb; }
#content, #download { background: #246; border: 1px solid #467; }
#contentframe { background: #000; padding: 10px; }
#probelist { width: 100%; background: #8ab; background: rgba(99, 162, 230, 0.5); border: 1px solid #235; padding: 0; }
td.probe { width: 33%; position: relative; }
.first.probe { border-right: 1px solid #235; }
.last.probe { border-left: 1px solid #235; }
.legfill { border: 1px solid #ccc; padding: 1px; display: inline-block; width: 16px; height: 16px; }
.dph { color: #003; font-size: 10pt; text-align: right; position: absolute; right: 0; bottom: 0; }
.pname { color: #003; font-size: 18pt; line-height: 16pt; display: inline-block; }
.ptemp { font-size: 32pt; line-height: 26pt; color: #fff; }
.alarmHigh { color: #c00 !important; }
.alarmLow { color: #33f !important; }
#graphtt { display: none; position: absolute; border: 1px solid #89c; background: #eef;
    opacity: 0.9; padding: 2px; color: #003; z-index: 10; }
#graphtt_title { color: #fff; border: 1px solid #008; background-color: #357; }
#graphtt_peak { font-size: smaller; color: #fff; }
.hotback { background-color: #d20; }
.coldback { background-color: #08F; }
#graphtt_arrow { position: absolute; left: 0; bottom: -9px; }
#dialog-overlay { width: 100%; height: 100%; position: fixed;
    top: 0px; left: 0px; display: none; background-color: #000;
    opacity: 0.6; z-index: 2; }
#alarm { background-color: #600; width: 340px; height: 150px;
    border: 5px solid #fff; padding: 10px; color: #fff;
    position: fixed; z-index: 3; top: 100px; display: none;
    left: 50%; margin-left: -240px; }
#alarmclear { display: none; position: absolute; bottom: 4px; right: 4px; color: #ccc; }
.probeicons { left: 0; bottom: 0; position: absolute; height: 16px; }
.probeicon { display: none; float: left; width: 16px; height: 16px; margin-left: 2px; }
.alarmact { background-image: url('<%=resource%>/alarms.png'); }
.noise { background-image: url('<%=resource%>/noise.png'); }
.rfstatus { background-image: url('<%=resource%>/rf.png'); }
#pidint { width: 200px; background-color: #fcfcfc; border-radius: 5px; 
    border: 1px solid #333; position: absolute; font-size: 10pt;
    bottom: 0px; line-height: 12pt; padding: 3px; display: none; }
.pilabel { width: 7%; color: #555; font-weight: bold; float: left; clear: left; }
.first.pilabel { margin-top: 1px; }
.pival { width: 25%; color: #aaa; text-align: right; float: left; }
.first.pival { margin-top: 1px; }
.pibarcont { position: relative; float: right; width: 65%; border: 1px solid #999;
    background-color: #f0f0f0; }
.pibar { position: relative; }
.pipip { position: absolute; left: 50%; top: 0; width: 1px; height: 100%;
    background-color: #999; }
#navcontainer ul { list-style-type: none; margin-top: 10px; margin-bottom: 0; }
#navcontainer li { display: inline; }
#navcontainer li a { text-decoration: none; color: #f3f1e9;
    padding: 4px 30px 4px 30px; border: 1px solid #000; }
#navcontainer li a:hover { background-color: #246; color: #f3f1e9;
    border: 1px solid #333; }
.noisebtn { color: #555; text-align: center; height: 32px; font-size: 15px;
    border: 1px solid #dcdcdc; line-height: 32px; background-color: #ededed;
    margin-left: 576px; }
.first.noisebtn { border-top-left-radius: 6px; border-top-right-radius: 6px; }
.last.noisebtn { border-bottom-left-radius: 6px; border-bottom-right-radius: 6px; }
#updatedtime { position: absolute; top: 8px; right: 13px; color: #bbb; font-size: 12pt; }
#lid { position: absolute; top: 8px; left: 13px; color: #bbb; font-size: 12pt; padding: 0 32px 28px 0; }
#png { display: none; height: 350px; margin: 8px auto 0px auto; }
#noisegraph { display: none; height: 256px; width: 700px; margin: 8px auto 0px auto; }
#noisegraph_g { height: 256px; width: <%= context.authuser == "root" and '576' or '700' %>px; float: left; }
#graph { height: 350px; width: 700px; margin: 8px auto 0px auto; }
#graphcontainer { display: inline-block; }
#graph_overview { height: 90px; width: 700px; margin-left: auto; margin-right: auto; }
#graph_opts { color: #000; }
#loadindic { display: none; position: relative; top: -320px; z-index: 2; }
#pn0 { color: #bbb; font-size: 28pt; }
#p0container { font-size: 120pt; line-height: 100pt; color: #fff; position: relative; }
.ramp { color: #bbb; }
#ramp { font-size: 22pt; line-height: 22pt; display: none; }
#setcontainer { font-size: 22pt; line-height: 22pt; position: absolute; bottom: 0; right:0; }
#backimage { font-family: Trebuchet MS; background: #000 url('<%=resource%>/fire.png') repeat-x scroll left bottom; }
#backoverlay { background: rgba(76,135,199,0.5); }
#fancontainer { background: #357; border: 1px solid #777; height: 20px; position: relative; }
#fanc { position: absolute; left: 0; top: 3px; z-index: 0; background: #008db8;
  width: 0%; height: 14px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; }
#fanf { position: absolute; left: 0; top: 3px; z-index: 1; background: #0ad;
  width: 0%; height: 14px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; }
#fanl { position: absolute; left: 0; top: 1px; z-index: 2; color: #003; font-size: 10pt; }
#fana { position: absolute; left: 0; top: 0; z-index: 3; width: 3px; height: 20px; background: #fe4; opacity: 0.5; }
img.preload { display: none; }
#share { position: fixed; bottom: 0px; padding: 2px 16px; background: rgba(20, 20, 20, 0.2);
  border-radius: 4px 4px 0 0; }
.botright { position: fixed; bottom: 0px; right: 0px; padding: 2px 16px; background: rgba(20, 20, 20, 0.2);
  border-radius: 4px 4px 0 0; }
.botright a { color: #66c; }
.botright a:visited { color: #999; }
.pcolor0 { background: #e73; }
.pcolor1 { background: #6c3; }
.pcolor2 { background: #297; }
.pcolor3 { background: #789; }
.ooutcolor { background: #6cf; }
.ofancolor { background: #4c99bf; }
.osercolor { background: #cef; }
<%=nixio.fs.readfile("/usr/share/linkmeter/user.css") or ""%>
</style>
</head>

<body>
<img src="<%=resource%>/fire.png" class="preload">
<div id="contentframe">
    <div id="content">
      <form id="download" method="POST" action="<%=build_url("lm/dluri")%>" target="_blank"
        enctype="multipart/form-data" style="display: none;">
        <input name="uri" value="" />
<% if rrd then fshort = nixio.fs.basename(rrd):sub(1, -5); pngname = fshort .. ".png" %>
        <input name="filename" value="<%=pngname%>" />
      </form>
      <div onclick="downloadPng();">
        <h2 style="margin-bottom: 0;">Archive <%=fshort%></h2>
        <img src="<%=resource%>/picture_save.png" alt="save" title="Save graph image"> Save graph image
        <!-- Need some blank but visible elements to be able to pull their color css -->
        <div class="pcolor0"></div><div class="pcolor1"></div><div class="pcolor2"></div><div class="pcolor3"></div>
      </div>
<% else %>
      </form>
      <div id="backimage"><div id="backoverlay">
        <div class="pcolor0" id="pl0"></div><div id="pn0">Pit</div>
        <div id="updatedtime">00:00:00 AM</div>
        <div id="lid" title="Click to toggle lid mode"></div>
        <div id="p0container" >
          <span id="temp0">---</span>
          <div id="ramp" class="ramp"></div>
          <div id="setcontainer">Set <span id="set">---</span>
          </div>
          <div id="pidint">
            <div class="pibarcont">
              <div class="pibar" id="pibp">&nbsp;</div>
              <div class="pibar" id="pibi">&nbsp;</div>
              <div class="pibar" id="pibd">&nbsp;</div>
              <div class="pipip"></div>
            </div>
            <div class="pilabel first">P</div>
            <div class="pival first" id="pivp">-%</div>
            <div class="pilabel">I</div>
            <div class="pival" id="pivi">-%</div>
            <div class="pilabel">D</div>
            <div class="pival" id="pivd">-%</div>
            <div class="pilabel">dT</div>
            <div class="pival" id="pivdt">-&deg;</div>
          </div>
          <div class="probeicons">
            <div class="probeicon alarmact" id="alarm0"></div>
            <div class="probeicon noise" id="noise0" data-adc="5"></div>
            <div class="probeicon rfstatus" id="rfs0"></div>
          </div>
        </div>

        <div id="fancontainer">
            <div id="fanc"></div>
            <div id="fanf"></div>
            <div id="fanl"></div>
            <div id="fana"></div>
        </div>

        <table id="probelist"><tr>
            <td class="probe first">
                <div class="probeicons">
                  <div class="probeicon alarmact" id="alarm1"></div>
                  <div class="probeicon noise" id="noise1" data-adc="4"></div>
                  <div class="probeicon rfstatus" id="rfs1"></div>
                </div>
                <div class="legfill pcolor1" id="pl1"></div>
                <div class="pname" id="pn1">-</div>
                <div class="ptemp" id="temp1">-</div>
                <div class="dph" id="dph1"></div>
            </td>
            <td class="probe">
                <div class="probeicons">
                  <div class="probeicon alarmact" id="alarm2"></div>
                  <div class="probeicon noise" id="noise2" data-adc="3"></div>
                  <div class="probeicon rfstatus" id="rfs2"></div>
                </div>
                <div class="legfill pcolor2" id="pl2"></div>
                <div class="pname" id="pn2">-</div>
                <div class="ptemp" id="temp2">-</div>
                <div class="dph" id="dph2"></div>
            </td>
            <td class="probe last">
                <div class="probeicons">
                  <div class="probeicon alarmact" id="alarm3"></div>
                  <div class="probeicon noise" id="noise3" data-adc="2"></div>
                  <div class="probeicon rfstatus" id="rfs3"></div>
                </div>
                <div class="legfill pcolor3" id="pl3"></div>
                <div class="pname" id="pn3">-</div>
                <div class="ptemp" id="temp3">-</div>
                <div class="dph" id="dph3"></div>
            </td>
        </tr></table>
      </div></div>
      <div id="noisegraph">
        <div id="noisegraph_g"></div>
<% if context.authuser == "root" then %>
        <div class="noisebtn first" id="nn0" data-adc="5">5</div>
        <div class="noisebtn" id="nn1" data-adc="4">4</div>
        <div class="noisebtn" id="nn2" data-adc="3">3</div>
        <div class="noisebtn" id="nn3" data-adc="2">2</div>
        <div class="noisebtn" data-adc="1" title="Fan feedback">FFB</div>
        <div class="noisebtn last" data-adc="0" title="Buttons">Btn</div>
        <div class="noisebtn first last" style="margin-top: 4px;" id="noiseoff" data-adc="255">Disable</div>
<% end %>
      </div>
<% end %>
      <div style="position: relative;">
        <div id="graphcontainer">
          <div id="graph"></div>
          <div id="graphtt">
            <div id="graphtt_title"></div>
            <div id="graphtt_content"></div>
            <div id="graphtt_peak"></div>
            <img id="graphtt_arrow" src="<%=resource%>/ttarrow.png">
          </div>
        </div>
        <div id="graph_overview"></div>
        <div id="loadindic"><img src="<%=resource%>/loading.gif" style="width: 126px; height: 22px;"></div>
      </div>
    </div>
    <div id="navcontainer">
        <ul>
            <%
        if context.authuser ~= "root" then
          write("<li><a href=%q>Login</a></li>" % build_url("admin/lm/home"))
        end
        write("<li><a href=%q>Alarms</a></li>" % build_url("admin/lm/alarm"))
        write("<li><a href=%q>Archive</a></li>" % build_url("admin/lm/archive"))
        write("<li><a href=%q>Configuration</a></li>" % build_url("admin/lm"))
        %>
        </ul>
    </div>
</div>
<div id="graph_opts">
    <select id="outputselect">
        <option value="0">Hide output</option>
        <option value="1" selected>Show output</option>
        <option value="2">Show fan</option>
        <option value="3">Show servo</option>
        <option value="4">Show fan/servo</option>
    </select>
    <select id="rangeselect">
        <option value="" selected>Auto scale</option>
        <option value="460">1 hour</option>
        <option value="360">6 hours</option>
        <option value="240">12 hours</option>
        <option value="0">24 hours</option>
    </select>
</div>
<div id="dialog-overlay"></div>
<div id="alarm">
    <h2></h2>
    <p></p>
    <div id="alarmclear"></div>
</div>
<div><div class="ooutcolor"></div><div class="ofancolor"></div><div class="osercolor"></div></div>
<img src="<%=resource%>/noise.png" class="preload">
<img src="<%=resource%>/rf.png" class="preload">
<div id="share">Download
  <img src="<%=resource%>/chart_curve.png" alt="save_graph" title="Save graph image" onclick="downloadPng();">
  <a id="dlcsv" target="_blank" href=""><img src="<%=resource%>/table_go.png" alt="save_csv" title="Save CSV data"></a>
</div>
<div class="botright"><a href="<%= context.authuser == "root" and build_url("admin/lm/light") or build_url("lm/light")%>">Lo-fi Home</a></div>
</body>

</html>
